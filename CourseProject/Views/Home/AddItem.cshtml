@model CourseProject.Models.Item
@using CourseProject.Resources
<link href="@Url.Content("~/Content/site.css")" rel="stylesheet" type="text/css" />
<script src="~/Scripts/jquery-3.4.1.js"></script>
<link href="~/Content/jquery-ui.min.css" rel="stylesheet" />
<script src="~/Scripts/jquery-ui.min.js"></script>
<script src="~/Scripts/jquery-ui.js"></script>
<div class="items">
    <h4>@Language.Add_item_to @ViewBag.Title</h4>
    @using (Html.BeginForm())
    {
        <table class="table table-hover">
            <tr>
                <td>
                    @Language.Type
                </td>
                <td>
                    @Language.Item
                </td>
            </tr>
            @for (int i = 0; i < Model.IntValues.Count; i++)
            {
                <tr>
                    <td>@Language.IntType</td>
                    <td>
                        @Language.Name:@Html.EditorFor(model => model.IntValues[i].Name)  <br />
                        @Language.Value:@Html.EditorFor(model => model.IntValues[i].Value)
                    </td>
                    <td>
                        @Html.HiddenFor(model => model.IntValues[i].Name)
                        @Html.HiddenFor(model => model.IntValues[i].Value)
                        @Html.HiddenFor(model => model.IntValues[i].ItemId, new { id = "itemid", Value = Model.Id })
                </tr>
            }
            @for (int i = 0; i < Model.BoolValues.Count; i++)
            {
                <tr>
                    <td>@Language.BoolType</td>
                    <td>
                        @Language.Name:@Html.EditorFor(model => model.BoolValues[i].Name) <br />
                        @Language.Value:@Html.EditorFor(model => model.BoolValues[i].Value)
                    </td>
                    <td>
                        @Html.HiddenFor(model => model.BoolValues[i].Name)
                        @Html.HiddenFor(model => model.BoolValues[i].Value)
                        @Html.HiddenFor(model => model.BoolValues[i].ItemId, new { id = "itemid", Value = Model.Id })
                </tr>
            }
            @for (int i = 0; i < Model.StringValues.Count; i++)
            {
                <tr>
                    <td>@Language.StringType</td>
                    <td>
                        @Language.Name:@Html.EditorFor(model => model.StringValues[i].Name) <br />
                        @Language.Value: @Html.TextAreaFor(model => model.StringValues[i].Value, new { id = "editor" + @i, @class = "editor" })
                    </td>
                    @Html.HiddenFor(model => model.StringValues[i].Name)
                    @Html.HiddenFor(model => model.StringValues[i].Value)
                    @Html.HiddenFor(model => model.StringValues[i].ItemId, new { id = "itemid", Value = Model.Id })
                </tr>
            }
            @for (int i = 0; i < Model.DateValues.Count; i++)
            {
                <tr>
                    <td>@Language.DateType</td>
                    <td>
                        @Language.Name:@Html.EditorFor(model => model.DateValues[i].Name)  <br />
                        @Language.Value:@Html.EditorFor(model => model.DateValues[i].Value)
                    </td>
                    @Html.HiddenFor(model => model.DateValues[i].Name)
                    @Html.HiddenFor(model => model.DateValues[i].Value)
                    @Html.ValidationMessageFor(model => model.DateValues[i].Value, Language.Format)
                    @Html.HiddenFor(model => model.DateValues[i].ItemId, new { id = "itemid", Value = Model.Id })
                </tr>
            }
        </table>
        @Html.TextBoxFor(model => model.Tags, new { id = "tags", name = "tags", style = "max-width:300px !important;" })
        @Html.HiddenFor(model => model.Tags)
        @Html.HiddenFor(model => model.CollectionId)
        <input type="submit" value="@Language.Add" />
    }
</div>

<script>
        $("#tags").autocomplete({
        source: function (request, response) {
            $ . ajax ({
                url: '@Url.Action("Tags","Home")',
                dataType: "json",
                data: { search: $("#tags").val() },
                success: function (data) {
                    var input = data.Input + ' '
                    response($.map(data.Tag, function (item) {
                        return { label: item.TagName, value: input + item.TagName };
                    }));
                }
            });
        }
        });

    var editors = $(".editor");

    editors.each(function () {
        var editor = this;
        ClassicEditor.create(document.querySelector('#' + this.id))
            .then(editor => {
                console.log(editor);
            })
            .catch(error => {
                console.error(error);
            });
    });

    
</script>


<style>

    .ck-editor {
        max-width: 80% !important;
        margin-left: 20% !important;
    }

</style>